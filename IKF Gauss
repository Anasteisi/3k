//IKF Gauss
#include<iostream>
#include <cmath>
using namespace std;
const int n = 3;//Kardano!
const double a = 1.7;
const double b = 3.2;
const double alpha = 0;
const double beta = 0.25;
const double e = 2.71828;
const double delta = 0.01;
const int row_num = n, col_num = n + 1;

const double pi = 3.14159;

double f(double x)
{
	return 3 * cos(0.5*x)*pow(e, x * 0.25) + 5 * sin(2.5*x)*pow(e, (-0.33333 * x)) + 2 * x;//#2
}

double p(double x)
{
	return pow(x - a, -1 * alpha)*pow(b - x, -1 * beta);
}

double omega(double x, double arrx[n])
{
	double rez = 1;
	for (int i = 0; i < n; i++)
		rez *= (x - arrx[i]);
	return rez;
}

double fkdx(double x, int k)
{
	if (k == 1)
		return -3 * 0.5 * sin(0.5*x) * 0.25 * pow(e, x * 0.25) + 5 * 2.5*cos(2.5*x)*(-0.33333)*pow(e, (-0.33333  * x)) + 2;
	else
	{
		if (k % 2 == 0)//chet
		{
			if (k % 4 != 0)
				return -3 * pow(0.5, k) * cos(0.5*x) * pow(0.25, k) * pow(e, x* 0.25) - 5 * pow(2.5, k)*sin(2.5*x)*pow(-0.33333, k)*pow(e, (-0.33333 * x));
			else
				return 3 * pow(0.5, k) * cos(0.5*x) * pow(0.25, k) * pow(e, x* 0.25) + 5 * pow(2.5, k)*sin(2.5*x)*pow(-0.33333, k)*pow(e, (-0.33333 * x));
		}
		else
		{
			int tmp = k / 4;
			if ((k - tmp * 4) == 3)
				return 3 * pow(0.5, k) * sin(0.5*x) * pow(0.25, k) * pow(e, x* 0.25) - 5 * pow(2.5, k)*cos(2.5*x)*pow(-0.33333, k)*pow(e, (-0.33333 * x));
			else//==1
				return -3 * pow(0.5, k) * sin(0.5*x) * pow(0.25, k) * pow(e, x* 0.25) + 5 * pow(2.5, k)*cos(2.5*x)*pow(-0.33333, k)*pow(e, (-0.33333 * x));
		}
	}
}

void VietaKardano(double arrx[n], double arra[n])
{
	double Q = 0, R = 0;
	Q = (pow(arra[2], 2) - 3 * arra[1]) / 9;
	R = (2 * pow(arra[2], 3) - 9 * arra[2] * arra[1] + 27 * arra[0]) / 54;
	double S = pow(Q, 3) - pow(R, 2);
	double fi = acos(R / sqrt(pow(Q, 3))) / 3;
	arrx[0] = -2 * sqrt(Q)*cos(fi) - arra[2] / 3;
	arrx[1] = -2 * sqrt(Q)*cos(fi + 2 * pi / 3) - arra[2] / 3;
	arrx[2] = -2 * sqrt(Q)*cos(fi - 2 * pi / 3) - arra[2] / 3;
}

void partially_pivot(double arr[row_num][col_num], int pivot_row, int pivot_col) // for GJ
{
	double temp;
	int i, large_pivot_row = pivot_row;

	for (i = pivot_row; i < row_num; i++)
		if (arr[i][pivot_col] > arr[large_pivot_row][pivot_col])
			large_pivot_row = i;

	if (pivot_row != large_pivot_row)
		for (i = 0; i < col_num; i++)
		{
			temp = arr[large_pivot_row][i];
			arr[large_pivot_row][i] = arr[pivot_row][i];
			arr[pivot_row][i] = temp;
		}
}

void Gauss(double arrkoeff[row_num][col_num])
{
	double diagonal_element = 0, flag = 0;
	for (int i = 0; i < row_num; i++)//GJ
		for (int j = 0; j < col_num; j++)
			if (i == j)
			{
				partially_pivot(arrkoeff, i, j);
				diagonal_element = arrkoeff[i][j];
				for (int l = 0; l < col_num; l++)
					arrkoeff[i][l] /= diagonal_element;

				for (int k = 0; k < row_num; k++)
				{
					flag = arrkoeff[k][j];
					for (int l = 0; l < col_num; l++)
						if (k != i)
							arrkoeff[k][l] = (arrkoeff[k][l]) - flag * (arrkoeff[i][l]);
				}
			}
}

void printarr(double arrkoeff[row_num][col_num])
{
	for (int i = 0; i < row_num; i++)
	{
		for (int j = 0; j < col_num; j++)
			cout << arrkoeff[i][j] << " ";
		cout << endl;
	}
}

int main()
{
	double arrmu[2 * n];

	for (int j = 0; j < 2 * n; j++)
	{
		double tmp1 = 0, g0 = a, g1 = a + delta;
		while (g1 <= b)
		{
			double ksi = (g1 + g0) * 0.5;
			tmp1 += p(ksi)*pow(ksi, j)*(g1 - g0);
			g0 = g1, g1 += delta;
		}
		arrmu[j] = tmp1;
	}

	double arrkoeff[row_num][col_num];

	for (int i = 0; i < row_num; i++)
		for (int j = 0; j < col_num - 1; j++)
			arrkoeff[i][j] = arrmu[j + i];
	for (int i = 0; i < row_num; i++)
		arrkoeff[i][col_num - 1] = -1 * arrmu[n + i];

	Gauss(arrkoeff);

	double arra[n];
	for (int i = 0; i < n; i++)
		arra[i] = arrkoeff[i][col_num - 1];

	//for (int i = 0; i < n; i++)
		//cout << arra[i] << " a" << i << endl;

	double arrx[n]; //x^3+arra[2]*x^2+arra[1]*x+arra[0]=0
	VietaKardano(arrx, arra);

	for (int i = 0; i < n; i++)
		cout << arrx[i] << " x" << i << endl;

	for (int i = 0; i < row_num; i++)
		for (int j = 0; j < col_num - 1; j++)
			arrkoeff[i][j] = pow(arrx[j], i);
	for (int i = 0; i < row_num; i++)
		arrkoeff[i][col_num - 1] = arrmu[i];

	Gauss(arrkoeff);

	double arrA[n];
	for (int i = 0; i < n; i++)
		arrA[i] = arrkoeff[i][col_num - 1];

	//for (int i = 0; i < n; i++)
		//cout << arrA[i] << " A" << i << endl;

	double rez1 = 0;//kfGauss
	for (int i = 0; i < n; i++)
		rez1 += arrA[i] * f(arrx[i]);

	double rez2 = 0;//integral
	double g0 = a, g1 = a + delta;
	while (g1 <= b)
	{
		double ksi = (g1 + g0) * 0.5;
		rez2 += p(ksi)*f(ksi)*(g1 - g0);
		g0 = g1, g1 += delta;
	}

	double Rn1 = 0;
	g0 = a, g1 = a + delta;
	while (g1 <= b)
	{
		double ksi = (g1 + g0) * 0.5;
		Rn1 += p(ksi)*omega(ksi, arrx)*omega(ksi, arrx)*fkdx(ksi, 2*n)*(g1 - g0);
		g0 = g1, g1 += delta;
	}
	for (int i = 1; i < 2*n + 1; i++)
		Rn1 /= i;///???

	double Rn2 = rez2 - rez1;

	cout << fixed;
	cout.precision(8);
	cout << "KFGauss = " << rez1 << ", Integral = " << rez2 << endl;
	cout << "Pogreshnost' metodicheskaya KFGauss = " << Rn1 << endl;
	cout << "Pogreshnost' = " << Rn2 << endl;

	system("pause");
	return 0;
}
