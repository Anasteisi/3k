//Newton
#include <iostream>
#include <ctime>
#include <cstring>

using namespace std;
const int n = 5;
const double a = 5;
const double b = 7;

double f(double x)
{
	return x * x - 1 - log(x);//#18
	//return abs(x) * (x * x - 1 - log(x));
}

double P(double arrx[n + 1], double x)
{
	double rez = 0;
	double arrdiv[n + 1][n + 1];
	for (int i = 0; i < n + 1; i++)
		for (int j = 0; j < n + 1; j++)
			arrdiv[i][j] = 0;
	for (int i = 0; i < n + 1; i++)
		arrdiv[i][0] = f(arrx[i]);
	for (int j = 1; j < n + 1; j++)
		for (int i = 0; i < n + 1 - j; i++)
			arrdiv[i][j] = (arrdiv[i + 1][j - 1] - arrdiv[i][j - 1]) / (arrx[i + j] - arrx[i]);

	for (int j = 0; j < n + 1; j++)
	{
		double tmp = 1;
		for (int i = 0; i < j; i++)
			tmp *= (x - arrx[i]);
		rez += tmp * arrdiv[0][j];
	}
	return rez;
}

int main()
{
	double arrx1[n + 1];
	double arrx2[n + 1];

	double a1 = a;
	for (int i = 0; i < n + 1; i++)
	{
		arrx1[i] = a1;
		a1 += (b - a) / n;
	}

	double pi = 3.1416;
	for (int i = 0; i < n + 1; i++)
		arrx2[i] = ((b - a) * cos((2 * i + 1)* pi / (2 * n + 2)) + b + a) / 2;

	double arrx[n + 1];
	for (int i = 0; i < n + 1; i++)
		arrx[i] = arrx1[i];
		//arrx[i] = arrx2[i];

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n - i; j++)
			if (arrx[j] > arrx[j + 1])
				swap(arrx[j], arrx[j + 1]);//min->max

	cout << "[a,b] : n" << endl;
	//cout << "Formula 3.2" << endl;
	cout << "x" << "\t";
	cout << "f(x)" << "\t";
	cout << "Pn(x)" << "\t";
	cout << "f(x) - Pn(x)" << endl << endl;
	double x0 = a, eps = 0.05;
	while (x0 <= b)
	{
		cout << round(x0 * 1000000) / 1000000 << "\t" << round(f(x0) * 1000000) / 1000000 << "\t" << round(P(arrx, x0) * 1000000)/ 1000000 << "\t" << round((f(x0) - P(arrx, x0)) * 1000000) / 1000000 << endl;
		x0 += eps;
	}

	system("pause");
	return 0;
}
